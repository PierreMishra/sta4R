L <- get_location(api, location.coordinates = lc)
L
type <- "point"
L <- get_location(api, location.coordinates = lc, location.type = type)
L
library(httr)
library(jsonlite)
api <- "http://sta-demo.internetofwater.dev/api/v1.1"
# get things (by iot_id & name)
get_things <- function(api, iot_id = NULL, name = NULL) {
if (is.null(iot_id) & is.null(name)){
x <- GET(url = paste0(api, "/Things"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)) {
x <- GET (url = paste0(api, "/Things?$filter=name%20eq%20%27", name, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(name)) {
x <- GET (url = paste0(api, "/Things?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
}
# get location (iot_id, location.coordinates)
get_location <- function (api, iot_id=NULL, location.coordinates=NULL, location.type=NULL){
if (is.null(iot_id) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(location.coordinates)){
x <- GET(url = paste0(api, "/Locations?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)){
x <- GET(url = paste0(api, "/Locations?$filter=st_equals(location,geography%27",
toupper(location.type), "(", paste(c(location.coordinates), collapse = "%20"), ")%27)" ))
df <- fromJSON(as.character(x))
return (df$value)
}
}
# get location (iot_id, location.coordinates)
get_locations <- function (api, iot_id=NULL, location.coordinates=NULL, location.type=NULL){
if (is.null(iot_id) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(location.coordinates)){
x <- GET(url = paste0(api, "/Locations?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)){
x <- GET(url = paste0(api, "/Locations?$filter=st_equals(location,geography%27",
toupper(location.type), "(", paste(c(location.coordinates), collapse = "%20"), ")%27)" ))
df <- fromJSON(as.character(x))
return (df$value)
}
}
abc <- get_locations(api)
View(abc)
# get location (iot_id, location.coordinates, name)
get_locations <- function (api, iot_id=NULL, name = NULL, location.coordinates=NULL, location.type=NULL){
if (is.null(iot_id) & is.null(name) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations?$filter=name%20eq%20", name))
}
else if (is.null(location.coordinates)){
x <- GET(url = paste0(api, "/Locations?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)){
x <- GET(url = paste0(api, "/Locations?$filter=st_equals(location,geography%27",
toupper(location.type), "(", paste(c(location.coordinates), collapse = "%20"), ")%27)" ))
df <- fromJSON(as.character(x))
return (df$value)
}
}
get_locations(api = api)
name <- "MBOWN-208 - 29S.02E.13.113A"
get_locaions(api=api, name=name)
# type <- "point"
# lc <- c(-105.795, 32.8542)
# L <- get_location(api, location.coordinates = lc, location.type = type)
abc <- get_locations(api=api, name=name)
# get location (iot_id, location.coordinates, name)
get_locations <- function (api, iot_id=NULL, name = NULL, location.coordinates=NULL, location.type=NULL){
if (is.null(iot_id) & is.null(name) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations?$filter=name%20eq%20", name))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(location.coordinates)){
x <- GET(url = paste0(api, "/Locations?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)){
x <- GET(url = paste0(api, "/Locations?$filter=st_equals(location,geography%27",
toupper(location.type), "(", paste(c(location.coordinates), collapse = "%20"), ")%27)" ))
df <- fromJSON(as.character(x))
return (df$value)
}
}
# type <- "point"
# lc <- c(-105.795, 32.8542)
# L <- get_location(api, location.coordinates = lc, location.type = type)
abc <- get_locations(api=api, name=name)
# type <- "point"
# lc <- c(-105.795, 32.8542)
# L <- get_location(api, location.coordinates = lc, location.type = type)
abc <- get_locations(api=api, name="TV-157")
# type <- "point"
# lc <- c(-105.795, 32.8542)
# L <- get_location(api, location.coordinates = lc, location.type = type)
abc <- get_locations(api=api, name="MBOWN-208 - 29S.02E.13.113A")
# get location (iot_id, location.coordinates, name)
get_locations <- function (api, iot_id=NULL, name = NULL, location.coordinates=NULL, location.type=NULL){
if (is.null(iot_id) & is.null(name) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id) & is.null(location.coordinates) & is.null(location.type)){
name <- gsub(" ","%20",name)
x <- GET(url = paste0(api, "/Locations?$filter=name%20eq%20", name))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(location.coordinates)){
x <- GET(url = paste0(api, "/Locations?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)){
x <- GET(url = paste0(api, "/Locations?$filter=st_equals(location,geography%27",
toupper(location.type), "(", paste(c(location.coordinates), collapse = "%20"), ")%27)" ))
df <- fromJSON(as.character(x))
return (df$value)
}
}
# type <- "point"
# lc <- c(-105.795, 32.8542)
# L <- get_location(api, location.coordinates = lc, location.type = type)
abc <- get_locations(api=api, name="MBOWN-208 - 29S.02E.13.113A")
name <- "MBOWN-208 - 29S.02E.13.113A"
paste0(api, "/Locations?$filter=name%20eq%20", name)
# get location (iot_id, location.coordinates, name)
get_locations <- function (api, iot_id=NULL, name = NULL, location.coordinates=NULL, location.type=NULL){
if (is.null(iot_id) & is.null(name) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id) & is.null(location.coordinates) & is.null(location.type)){
name <- gsub(" ","%20",name)
x <- GET(url = paste0(api, "/Locations?$filter=name%20eq%20%27", name, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(location.coordinates)){
x <- GET(url = paste0(api, "/Locations?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)){
x <- GET(url = paste0(api, "/Locations?$filter=st_equals(location,geography%27",
toupper(location.type), "(", paste(c(location.coordinates), collapse = "%20"), ")%27)" ))
df <- fromJSON(as.character(x))
return (df$value)
}
}
name <- "MBOWN-208 - 29S.02E.13.113A"
# type <- "point"
# lc <- c(-105.795, 32.8542)
# L <- get_location(api, location.coordinates = lc, location.type = type)
abc <- get_locations(api=api, name=name)
View(abc)
# get datastreams
get_datastreams <- function (api){
x <- GET(url = paste0(api, "/Datastreams"))
df <- fromJSON(as.character(x))
return (df$value)
}
get_datastreams(api)
bdc <- get_datastreams(api = api)
View(bdc)
library(httr)
library(jsonlite)
api <- "http://sta-demo.internetofwater.dev/api/v1.1"
# get things (by iot_id & name)
get_things <- function(api, iot_id = NULL, name = NULL) {
if (is.null(iot_id) & is.null(name)){
x <- GET(url = paste0(api, "/Things"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)) {
x <- GET (url = paste0(api, "/Things?$filter=name%20eq%20%27", name, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(name)) {
x <- GET (url = paste0(api, "/Things?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
}
#iot_id <- 2
#name <- 'TV-157'
abc <- get_things(api=api, name = "TV-157")
View(abc)
#iot_id <- 2
#name <- 'TV-157'
abc <- get_things(api=api,iot_id <- 2)
# get location (iot_id, location.coordinates, name) description too ????
get_locations <- function (api, iot_id=NULL, name=NULL, location.coordinates=NULL, location.type=NULL){
if (is.null(iot_id) & is.null(name) & is.null(location.coordinates) & is.null(location.type)){
x <- GET(url = paste0(api, "/Locations"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id) & is.null(location.coordinates) & is.null(location.type)){
name <- gsub(" ","%20",name)
x <- GET(url = paste0(api, "/Locations?$filter=name%20eq%20%27", name, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(location.coordinates)){
x <- GET(url = paste0(api, "/Locations?$filter=@iot.id%20eq%20", iot_id))
df <- fromJSON(as.character(x))
return (df$value)
}
else if (is.null(iot_id)){
x <- GET(url = paste0(api, "/Locations?$filter=st_equals(location,geography%27",
toupper(location.type), "(", paste(c(location.coordinates), collapse = "%20"), ")%27)" ))
df <- fromJSON(as.character(x))
return (df$value)
}
}
abc <- get_locations(api=api)
View(abc)
install.packages("sos4R")
library("sos4R")
install.packages("sos4R_0.4.2.tar.gz", repos=NULL, type="source")
library(httr)
library(jsonlite)
api <- "http://sta-demo.internetofwater.dev/api/v1.1"
library(httr)
library(jsonlite)
api <- "http://sta-demo.internetofwater.dev/api/v1.1"
get_things <- function(api){
x <- GET(url = paste0(api, "/Things"))
df <- fromJSON(as.character(x))
return (df$value)
}
abc <- get_things(api=api)
# Get things by IoT ID
get_things_by_id <- function(api, id){
x <- GET(url = paste0(api, "/Things(", id, ")"))
df <- fromJSON(as.character(x))
return (df$value)
}
abc <- get_things_by_id(api, 1)
id <- 1
paste0(api, "/Things(", id, ")")
paste0(api, "/Things?$filter=@iot.id%20eq%20", id)
id <- 201
# Get things by IoT ID
get_things_by_id <- function(api, id){
x <- GET(url = paste0(api, "/Things?$filter=@iot.id%20eq%", id))
df <- fromJSON(as.character(x))
return (df$value)
}
abc <- get_things_by_id(api, 1)
# Get things by IoT ID
get_things_by_id <- function(api, id){
x <- GET(url = paste0(api, "/Things?$filter=@iot.id%20eq%20", id))
df <- fromJSON(as.character(x))
return (df$value)
}
abc <- get_things_by_id(api, 1)
# Get things by thing's name
get_things_by_name <- function(api, name){
x <- GET(url = paste0(api, "/Things?$filter=name%20eq%20%27", name, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
name <- 354017108445201
# Get things by thing's name
get_things_by_name <- function(api, name){
x <- GET(url = paste0(api, "/Things?$filter=name%20eq%20%27", name, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
abc <-  get_things_by_name(api, name = name)
name <- '354017108445201'
abc <-  get_things_by_name(api, name = name)
get_things_by_optional_property <- function(api, prop.name, prop.value){
prop.value <- gsub(" ","%20",prop.value)
x <- GET(url = paste0(api, "/Things?$filter=properties/", prop.name,
"%20eq%20%27", prop.value, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
get_things_by_optional_property(api,Aquifer,Colorado Plateaus aquifers)
get_things_by_optional_property(api,"Aquifer","Colorado Plateaus aquifers")
prop.name <- "ThingDataProvider"
prop.value <- "U.S. Geological Survey"
abc <- get_things_by_optional_property(api, prop.name, prop.value)
View(abc)
library(httr)
library(jsonlite)
api <- "http://sta-demo.internetofwater.dev/api/v1.1"
id <- 201
name <- '354017108445201'
prop.name <- "ThingDataProvider"
prop.value <- "U.S. Geological Survey"
longtidude <- 1
latitude <- 1
# Get all things
get_things <- function(api){
x <- GET(url = paste0(api, "/Things"))
df <- fromJSON(as.character(x))
return (df$value)
}
# Get things by IoT ID
get_things_by_id <- function(api, id){
x <- GET(url = paste0(api, "/Things?$filter=@iot.id%20eq%20", id))
df <- fromJSON(as.character(x))
return (df$value)
}
# Get things by thing's name
get_things_by_name <- function(api, name){
x <- GET(url = paste0(api, "/Things?$filter=name%20eq%20%27", name, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
# Get things by optional properties
# prop.name and prop.value should be character values
get_things_by_optional_property <- function(api, prop.name, prop.value){
prop.value <- gsub(" ","%20",prop.value)
x <- GET(url = paste0(api, "/Things?$filter=properties/", prop.name,
"%20eq%20%27", prop.value, "%27"))
df <- fromJSON(as.character(x))
return (df$value)
}
# Get things by coordinates (longitude, latitude)
# use this format https://sta-demo.internetofwater.dev/api/v1.1/Things?$expand=Datastreams($filter=phenomenonTime%20le%202019-12-13T21:26:00.000Z)
get_things_by_coordinates <- function(api, longitude, latitude){
x <- GET(url = paste0(api, "/Things?$expand=Locations($filter=st_equals(location,geography%27POINT(",
longitude, "%20", latitude, ")%27))"))
df <- fromJSON(as.character(x))
return (df$value)
}
paste0(api, "/Things?$expand=Locations($filter=st_equals(location,geography%27POINT(",
longitude, "%20", latitude, ")%27))")
longidude <- 1
paste0(api, "/Things?$expand=Locations($filter=st_equals(location,geography%27POINT(",
longitude, "%20", latitude, ")%27))")
longitude <- 1
paste0(api, "/Things?$expand=Locations($filter=st_equals(location,geography%27POINT(",
longitude, "%20", latitude, ")%27))")
# Get things by coordinates (longitude, latitude)
# use this format https://sta-demo.internetofwater.dev/api/v1.1/Things?$expand=Datastreams($filter=phenomenonTime%20le%202019-12-13T21:26:00.000Z)
get_things_by_coordinates <- function(api, longitude, latitude){
x <- GET(url = paste0(api, "/Things?$expand=Locations($filter=st_equals(location,geography%27POINT(",
longitude, "%20", latitude, ")%27))"))
df <- fromJSON(as.character(x))
return (df$value)
}
longitude <- -108.7483
latitude <- 35.6711
abc <- get_things_by_coordinates(api, longitude, latitude)
View(abc)
View(abc[[9]][[6]])
# Get things by coordinates (longitude, latitude)
# use this format https://sta-demo.internetofwater.dev/api/v1.1/Things?$expand=Datastreams($filter=phenomenonTime%20le%202019-12-13T21:26:00.000Z)
# it is only filtering the entity immediately before, so if you write wrong coordinates, it will still show you all the things
# use this https://sta-demo.internetofwater.dev/api/v1.1/Things?$filter=st_equals(Locations/location,geography%27POINT(-106.6997%2031.7893)%27)
get_things_by_coordinates <- function(api, longitude, latitude){
x <- GET(url = paste0(api, "/Things?$filter=st_equals(Locations/location,geography%27POINT(",
longitude, "%20", latitude, ")%27))"))
df <- fromJSON(as.character(x))
return (df$value)
}
get_things_by_coordinates(api, longitude,latitude)
longitude <- -106.6997
latitude <- 31.7893
get_things_by_coordinates(api, longitude,latitude)
# Get things by coordinates (longitude, latitude)
# use this format https://sta-demo.internetofwater.dev/api/v1.1/Things?$expand=Datastreams($filter=phenomenonTime%20le%202019-12-13T21:26:00.000Z)
# it is only filtering the entity immediately before, so if you write wrong coordinates, it will still show you all the things
# use this https://sta-demo.internetofwater.dev/api/v1.1/Things?$filter=st_equals(Locations/location,geography%27POINT(-106.6997%2031.7893)%27)
get_things_by_coordinates <- function(api, longitude, latitude){
x <- GET(url = paste0(api, "/Things?$filter=st_equals(Locations/location,geography%27POINT(",
longitude, "%20", latitude, ")%27)"))
df <- fromJSON(as.character(x))
return (df$value)
}
get_things_by_coordinates(api, longitude,latitude)
abc <- get_things_by_coordinates(api, longitude,latitude)
View(abc)
unzip("lm_cnty")
unzip("lm_cnty.zip")
library(sf)
#unzip("lm_cnty.zip")
colorado_shapefile <- st_read("lm_cnty.shp")
head(colorado_shapefile)
col <- st_combine(colorado_shapefile)
View(col)
unzip("Colorado_State_Boundary-shp.zip")
unzip("Colorado_State_Boundary-shp.zip", overwrite = TRUE)
colorado_shapefile <- st_read("Colorado_State_Boundary.shp")
View(colorado_shapefile)
head(colorado_shapefile)
typeof(colorado_shapefile)
class(sf)
class(colorado_shapefile)
head(colorado_shapefile)
colorado_shapefile$geometry
View(colorado_shapefile[[3]][[1]])
colorado_shapefile$geometry[[1]]
class(colorado_shapefile$geometry[[1]])
ls <- st_cast(colorado_shapefile$geometry[[1]], "LINESTRING")
ls
class(ls)
length(ls)
ls[1]
ls[2]
ls[1][1]
ls[5]
print(ls)
ls <- st_cast(colorado_shapefile$geometry[[1]], "LINESTRING")
ls(1.5)
ls
ls[2]
ls[3]
get(ls)
library(tidyverse)
get(ls)
paste(ls)
colorado_shapefile$geometry[[1]]
polygon <- colorado_shapefile$geometry[[1]]
polygon[1]
polygon[1][1]
polygon[1,1]
polygon(1,2)
polygon[1,]
polygon <- colorado_shapefile$geometry[[1]][[1]]
polygon
polygon[1,1]
paste(polygon)
polygon[1,2]
for (x in polygon){
abcd <- x
}
for (row in polygon){
for (column in polygon){
r <- row
c <- column
latlong <- paste(r,c)
}
}
latlong <- polygon[1,]
latlong
for (n in polygon[1]){
cat(paste(n, collapse=","))
}
for (n in polygon[1,]){
cat(paste(n, collapse=","))
}
for (n in polygon[1,]){
cat(paste(n, collapse=", "))
}
for (n in polygon[1,]){
cat(paste(n, sep=","))
}
for (n in polygon[1,]){
print(n)
}
for (n in polygon[1,]){
print(n,",")
}
a <- as.vector(polygon[1,])
a
paste0(a, collapse=",")
paste0(a, collapse=" ")
head(polygon)
polygon <- as.matrix(polygon)
polygon_vector <- as.vector(t(polygon))
polygon_vector
polygon <- colorado_shapefile$geometry[[1]][[1]]
head(polygon)
paste0(polygon_vector, collapse=" ")
?paste0
paste0(a, collapse=",")
